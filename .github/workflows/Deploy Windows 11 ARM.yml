name: Deploy Windows 11 ARM

on:
  workflow_dispatch:

jobs:
  Server:
    runs-on: windows-11-arm
    steps:
      - name: 迁出代码
        uses: actions/checkout@v3

      - name: 设置用户
        shell: cmd
        run: |
          secedit /export /cfg c:\secpol.cfg
          echo. >c:\out.txt
          type c:\secpol.cfg | findstr -i complex >>c:\out.txt
          powershell -command "(GC C:\secpol.cfg) -Replace \"PasswordComplexity = 1\",\"PasswordComplexity = 0\" | Out-File C:\secpol.cfg"
          echo. >>c:\out.txt
          type c:\secpol.cfg | findstr -i complex >>c:\out.txt
          secedit /configure /db c:\windows\security\local.sdb /cfg c:\secpol.cfg /areas SECURITYPOLICY
          del /q c:\secpol.cfg
          type c:\out.txt
          del /q c:\out.txt
          del %windir%\security\logs\scesrv.log
          net user %USERNAME% ${{ secrets.WINPASS }}
          net user AD dd /add
          net localgroup Administrators AD /add
          powershell -Command "(Get-NetIPAddress | Where-Object {$_.IPAddress -match '^100\.'}).IPAddress" > local_ip.txt
          cat local_ip.txt 
          mkdir upload

      - name: 安装 PsExec
        shell: pwsh
        run: |
          # 设置下载地址和本地目标路径
          $psexecUrl = "https://download.sysinternals.com/files/PSTools.zip"
          $zipPath = "$env:TEMP\PSTools.zip"
          $extractPath = "C:\Tools\PSTools"

          # 创建目标目录
          if (!(Test-Path -Path $extractPath)) {
              New-Item -ItemType Directory -Path $extractPath -Force
          }

          # 下载 ZIP 文件
          Invoke-WebRequest -Uri $psexecUrl -OutFile $zipPath

          # 解压 ZIP 文件
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force

          # 可选：将目录加入系统环境变量 PATH
          $envPath = [System.Environment]::GetEnvironmentVariable("Path", "Machine")
          if ($envPath -notlike "*$extractPath*") {
              [System.Environment]::SetEnvironmentVariable("Path", "$envPath;$extractPath", "Machine")
              Write-Host "已添加 $extractPath 到系统环境变量 PATH"
          } else {
              Write-Host "目录已在 PATH 中"
          }

          # 检查 PsExec 是否存在
          if (Test-Path "$extractPath\PsExec.exe") {
              Write-Host "✅ PsExec 安装成功，路径：$extractPath\PsExec.exe"
          } else {
              Write-Host "❌ PsExec 安装失败，请检查下载或解压步骤"
          }


      - name: 安装Tailscale
        shell: pwsh
        run: |
          choco install chocolatey -y

      - name: 加入Tailscale私有网络
        shell: cmd
        run: |
          echo "C:\Program Files\Tailscale\tailscale.exe" up ^> C:\tslog.txt 2^>^&1 > C:\run_tailscale.bat
          C:\Tools\PSTools\PsExec.exe -accepteula -u AD -p dd "C:\run_tailscale.bat"

      - name: 查看IP地址
        shell: bash
        id: get_local_ip
        run: |
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"'

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT
          echo "local_ip=$(cat local_ip.txt )" >> $GITHUB_OUTPUT

      - name: 发送 Telegram 通知
        shell: pwsh
        run: |
          # 获取当前时间（UTC+8 时区，北京时间）
          $current_time = (Get-Date).ToUniversalTime().AddHours(8).ToString("yyyy-MM-dd HH:mm:ss")

          $message = @"
          <b>🚀 Windows 11 ARM64 部署成功 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.get_local_ip.outputs.public_ip }}</code>  
          🏠 <b>本地 IP:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.get_local_ip.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.get_local_ip.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.get_local_ip.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.get_local_ip.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.get_local_ip.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.get_local_ip.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.get_local_ip.outputs.timezone }}</code>  

          🕒 <b>当前时间:</b> <code>$current_time</code>  
          "@

          $message = [uri]::EscapeDataString($message)

          curl.exe -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" `
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" `
               -d "parse_mode=HTML" `
               -d "text=$message"

      - name: 安装MSYS2
        uses: msys2/setup-msys2@v2
        id: setup-msys2
      - name: 启动SSH终端
        uses: mxschmitt/action-tmate@v3
        with:
          msys2-location: ${{ steps.setup-msys2.outputs.msys2-location }}

      - name: 上传文件
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: my-artifact
          path: upload
        
