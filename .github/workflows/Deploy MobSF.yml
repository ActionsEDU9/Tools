name: Deploy MobSF

on:
  workflow_dispatch:

jobs:
  Server:
    runs-on: ubuntu-latest
    steps:
      - name: 迁出代码
        uses: actions/checkout@v3
        
      - name: 检查服务器配置
        id: check_server
        run: |
          echo -e "已知CPU型号(性能降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          echo "--------------------------网络信息--------------------------"
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"'

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT

      - name: 加入Tailscale私有网络
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:githubactions
          version: latest

      - name: 查看IP地址
        id: get_local_ip
        run: |
          ip a
          LOCAL_IP=$(ip -o -4 addr list | awk '/100\./ {print $4}' | cut -d/ -f1)
          echo "提取到本地 IP: ${LOCAL_IP}"
          echo "local_ip=${LOCAL_IP}" >> $GITHUB_OUTPUT

      - name: 启用 KVM
        run: |
          sudo apt update -y
          sudo apt install -y socat libpulse0
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: 创建 Android Emulator
        run: |
          \yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install 'build-tools;35.0.0' platform-tools 'platforms;android-29'
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install emulator --channel=0
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install 'system-images;android-29;default;x86_64' --channel=0
          \echo no | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager create avd --force -n mobsfemu --abi 'default/x86_64' --package 'system-images;android-29;default;x86_64'
          printf 'hw.ramSize=8096M\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'vm.heapSize=512M\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'hw.cpu.ncore=4\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'hw.gpu.enabled=yes\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'hw.gpu.mode=host\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'hw.lcd.width=1080\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'hw.lcd.height=1920\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'hw.lcd.density=420\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'disk.dataPartition.size=6144M\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini
          printf 'disk.cachePartition.size=256M\n' >> /home/runner/.config/.android/avd/mobsfemu.avd/config.ini

          ANDROID_AVD_HOME=/home/runner/.config/.android/avd /usr/local/lib/android/sdk/emulator/emulator -port 5554 -avd mobsfemu -gpu swiftshader_indirect -writable-system -no-snapshot -wipe-data  &
          /usr/local/lib/android/sdk/platform-tools/adb devices

      - name: 配置 Android Emulator
        run: |
          rm -rf "$HOME/.android"
          mkdir -p "$HOME/Android"
          ln -s /usr/local/lib/android/sdk "$HOME/Android/Sdk"
          ln -s "$HOME/.config/.android/" "$HOME/"
          wget https://github.com/MobSF/Mobile-Security-Framework-MobSF/raw/refs/heads/master/scripts/start_avd.sh
          sed -i.bak '/# Kill any existing emulator processes/,/Starting AVD.*on port/d' start_avd.sh
          # bash start_avd.sh mobsfemu 5554

      - name: 部署 MobSF
        run: |
          /usr/local/lib/android/sdk/platform-tools/adb devices
          docker pull opensecurity/mobile-security-framework-mobsf:latest
          docker run -itd --rm -p 80:8000 -e "MOBSF_ANALYZER_IDENTIFIER=172.17.0.1:5556" opensecurity/mobile-security-framework-mobsf:latest

      - name: 发送 Telegram 通知
        run: |
          # 获取当前北京时间（UTC+8）
          CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S" -d "+8 hours")

          MESSAGE=$(cat <<EOF
          <b>🛠️ MobSF 部署完成 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.check_server.outputs.public_ip }}</code>  
          🏠 <b>本地 IP:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.check_server.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.check_server.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.check_server.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.check_server.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.check_server.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.check_server.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.check_server.outputs.timezone }}</code>  

          🔗 <b>MobSF 访问地址:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}</code>  
          👤 <b>用户名:</b> <code>mobsf</code>  
          🔑 <b>密码:</b> <code>mobsf</code>  
          
          🕒 <b>当前时间:</b> <code>$CURRENT_TIME</code>  
          EOF
          )

          MESSAGE=$(echo "$MESSAGE" | jq -sRr @uri)

          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" \
               -d "parse_mode=HTML" \
               -d "text=$MESSAGE"

      - name: 启动 SSH 终端
        uses: mxschmitt/action-tmate@v3
